/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Hash
 #	author : miyako
 #	2016/10/21
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#include "openssl/evp.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Hash

		case 1 :
			Generate_checksum(pResult, pParams);
			break;

	}
}

// ------------------------------------- Hash -------------------------------------

bool Execute_method(size_t pos, size_t total, method_id_t methodId, const PA_Unichar *methodName)
{
	bool shouldAbort = false;
	
	if(methodId)
	{
		PA_Variable	params[2];
		params[0] = PA_CreateVariable(eVK_Real);
		params[1] = PA_CreateVariable(eVK_Real);
		PA_SetRealVariable(&params[0], pos);
		PA_SetRealVariable(&params[1], total);
		
		PA_Variable result = PA_ExecuteMethodByID(methodId, params, 2);
		
		if(PA_GetVariableKind(result) == eVK_Boolean)
			shouldAbort = PA_GetBooleanVariable(result);
		
		PA_ClearVariable(&params[0]);
		PA_ClearVariable(&params[1]);
	}else
	
	if(methodName)
	{
		PA_Variable	params[4];
		params[0] = PA_CreateVariable(eVK_Unistring);
		PA_Unistring _methodName = PA_CreateUnistring((PA_Unichar *)methodName);
		PA_SetStringVariable(&params[0], &_methodName);
		params[1] = PA_CreateVariable(eVK_Boolean);
		PA_SetBooleanVariable(&params[1], shouldAbort);
		params[2] = PA_CreateVariable(eVK_Real);
		params[3] = PA_CreateVariable(eVK_Real);
		PA_SetRealVariable(&params[2], pos);
		PA_SetRealVariable(&params[3], total);
		PA_ExecuteCommandByID(1007, params, 4);
		shouldAbort = PA_GetBooleanVariable(params[1]);
		PA_ClearVariable(&params[0]);
		PA_ClearVariable(&params[1]);
		PA_ClearVariable(&params[2]);
		PA_ClearVariable(&params[3]);
	}
	
	return shouldAbort;
}

void Generate_checksum(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_TEXT Param4;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);

#if VERSIONMAC
	Param1.convertPath();
	CUTF8String path;
	Param1.copyUTF8String(&path);
#else
	CUTF16String path;
	Param1.copyUTF16String(&path);
#endif
	
	unsigned int type = Param2.getIntValue();
	const EVP_MD *evp;
	uint32_t mlen, len;
	
	switch (type)
	{
  case Checksum_SHA1:
			evp = EVP_sha1();
			mlen = 20;
			break;
  case Checksum_SHA256:
			evp = EVP_sha256();
			mlen = 32;
			break;
  case Checksum_SHA384:
			evp = EVP_sha384();
			mlen = 48;
			break;
  case Checksum_SHA512:
			evp = EVP_sha512();
			mlen = 64;
			break;
  default:
			evp = EVP_md5();
			mlen = 16;
			break;
	}
	
	unsigned int format = Param3.getIntValue();
	const PA_Unichar *methodName = Param4.getUTF16Length() ? Param4.getUTF16StringPtr() : NULL;
	method_id_t methodId = PA_GetMethodID((PA_Unichar *)Param4.getUTF16StringPtr());
	
#if VERSIONMAC
	FILE *f = fopen ((const char *)path.c_str(), "rb");
#else
	FILE *f = _wfopen ((const wchar_t *)path.c_str(), L"rb");
#endif
	if(f)
	{
		fseek(f, 0L, SEEK_END);
		size_t total = (size_t)ftell(f);
		size_t pos = 0;
		
		fseek(f, 0L, SEEK_SET);
		unsigned char buf[BUFFER_SIZE];
		EVP_MD_CTX* c = EVP_MD_CTX_create();
		EVP_MD_CTX_init(c);
		EVP_DigestInit(c, evp);
		uint32_t mdlen = mlen;
		bool aborted = false;
		
		while ((len = fread (buf, 1, BUFFER_SIZE, f)) != 0)
		{
			PA_YieldAbsolute();
			EVP_DigestUpdate(c, buf, len);
			pos += len;
			aborted = Execute_method(pos, total, methodId, methodName);
			
			if(aborted)
				break;
		}
		
		if(!aborted)
		{
			uint8_t *md = (uint8_t *)calloc(mlen, sizeof(uint8_t));
			EVP_DigestFinal(c, md, &mdlen);
			
			C_BLOB temp;
			temp.setBytes((const uint8_t *)md, mlen);
			switch (format)
			{
				case Checksum_Format_Base64:
					temp.toB64Text(&returnValue);
					break;
				default:
					temp.toHexText(&returnValue);
					break;
			}
			
			free(md);
		}
		
		fclose(f);
	}
	
	returnValue.setReturn(pResult);
}

